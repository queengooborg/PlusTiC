plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

version = mod_version + '-mc' + minecraft_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, 1.16.5 ships Java 8
java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true
    
    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    enableIdeaPrepareRuns = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // this block needs to be here for runClient to exist
        }

        server {
            args '--nogui'
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            // Ensure dependent mods are loaded when running Minecraft in the IDE
            environment 'assetIndex', '{asset_index}'
            environment 'assetDirectory', '{assets_root}'
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }

    maven {
        name "cursemaven"
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name "ProgWML6"
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name "BlameJared"
        url "https://maven.blamejared.com"
    }
    maven {
        name "ModMaven"
        url "https://modmaven.dev"
    }
    maven {
        name "covers1624"
        url "https://maven.covers1624.net"
    }
    maven {
        name "ChaosField"
        url "https://maven.chaosfield.at"
    }
    maven {
        name "tehnut"
        url "https://tehnut.info/maven"
    }
    maven {
        name "HellFireDev"
        url "https://maven.hellfiredev.net"
    }
    maven {
        name "firstdarkdev"
        url "https://maven.firstdarkdev.xyz/releases/"
    }
}

dependencies {
    // Minecraft Forge
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Tinkers' Construct
    implementation fg.deobf("slimeknights.tconstruct:TConstruct:${minecraft_version}-${tconstruct_version}")
    implementation fg.deobf("slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}")

    // Dependencies for mods required for compilation
//    runtimeOnly "curse.maven:shadowfacts-forgelin-248453:2785465"
//    runtimeOnly "curse.maven:autoreglib-250363:2746011"
//    runtimeOnly "curse.maven:tesla-core-lib-254602:3438487-deobf-3438489-sources-3438488"
//    runtimeOnly "curse.maven:mtlib-253211:3308160"
//    runtimeOnly "curse.maven:redstone-flux-270789:2920436"

    // Mods required for compilation

//    implementation "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.20.700"
//    implementation fg.deobf("curse.maven:applied-energistics-2-223794:2747063") // "appeng:appliedenergistics2-forge:15.2.8"
//    implementation fg.deobf("curse.maven:psi-241665:3085917") // "vazkii.psi:Psi:1.19-101.530"
//    implementation fg.deobf("curse.maven:advent-of-ascension-nevermine-311054:2714823") // "curse.maven:advent-of-ascension-nevermine-311054:3054253"
//    implementation fg.deobf("curse.maven:botania-225643:3330934") // "vazkii.botania:Botania:1.20.1-445-FORGE"
////    implementation fg.deobf("curse.maven:actually-additions-228404:3117927")
//    implementation fg.deobf("curse.maven:astral-sorcery-241721:3044416") // "hellfirepvp.astralsorcery:astralsorcery:1.12.2-1.10.25-v167"
//    implementation fg.deobf("curse.maven:hwyla-253449:2568751-sources-2568752-api-2568753")
//    implementation fg.deobf("curse.maven:industrial-foregoing-266515:2745321-sources-2745322-api-2745323-deobf-2745324") // "com.buuz135:industrial-foregoing:1.20.1-3.5.19"
//    implementation fg.deobf("curse.maven:jei-238222:5101347") // "mezz.jei:jei_1.12.2:4.16.1.1012" // "mezz.jei:jei-1.20.1-common-api:15.8.0.11"

    // Libs for optional mods
//    runtimeOnly "curse.maven:codechicken-lib-242818:2779848-deobf-2779849" // "codechicken:CodeChickenLib:1.12.2-3.2.3.358" // "codechicken:CodeChickenLib:1.16.5-4.0.1.426"
//    runtimeOnly "curse.maven:cb-multipart-258426:2755790-deobf-2755791" // "codechicken:ForgeMultipart:1.12.2-2.6.2.83"
//    runtimeOnly "curse.maven:mrtjpcore-229002:2735197" // "mrtjp:MrTJPCore:1.12.2-2.1.4.43"
//    runtimeOnly "curse.maven:libvulpes-236541:3801015-deobf-3801016"
//    runtimeOnly "curse.maven:thedragonlib-248055:2580332"
//    runtimeOnly "curse.maven:cofh-core-69162:2920433"
//    runtimeOnly "curse.maven:cofh-world-271384:2920434"
//    runtimeOnly "curse.maven:brandons-core-231382:3408276"
//    runtimeOnly "curse.maven:valkyrielib-245480:2691542"

    // Optional mods
//    runtimeOnly "mrtjp:ProjectRed:1.12.2-4.9.4.120"
//    runtimeOnly "mekanism:Mekanism:1.21-10.6.3.49"
//    runtimeOnly "curse.maven:armorplus-237366:2952741"
//    runtimeOnly "curse.maven:thermal-foundation-222880:2926428"
//    runtimeOnly "curse.maven:draconic-evolution-223565:3431261"
////    runtimeOnly "curse.maven:avaritia-1-10-261348:3143349"
//    runtimeOnly "curse.maven:survivalist-242289:2625075"
//    runtimeOnly "curse.maven:projecte-226410:2702991"
//    runtimeOnly "curse.maven:gemsplusplus-310914:3029335-sources-3029336"
//    runtimeOnly "curse.maven:biomes-o-plenty-220318:2715506" // 'curse.maven:biomes-o-plenty-220318:3558882'

    // Mitigates a bug in Forge FML
//    implementation ("net.minecraftforge:mergetool") {
//        version {
//            strictly '0.2.3.3'
//        }
//    }
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project, tconstruct_version: tconstruct_version, mantle_version: mantle_version]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : mod_version,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

//task deobfJar(type: Jar) { // Generate deobfuscated
//   from sourceSets.main.output
//   classifier = 'deobf'
//}
//
//tasks.named('build').configure {
//    depends on 'deobfJar'
//}
//
//artifacts {
//   archives deobfJar
//   archives sourceJar
//   archives jar
//}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
